test<-apt_data[,yyyym==c("20161","20162","20163")]
apt_data[,c('yyyym','gu')]
test<-apt_data[apt_data[,yyyym==c("20161","20162","20163")]]
View(test)
test<-apt_data[apt_data$yyyym==c("20161","20162","20163","20164","20165","20166","20167","20168","20169","201610","201611","201612")&apt_data$gu=="관악구"]
test<-apt_data[(apt_data$yyyym==c("20161","20162","20163","20164","20165","20166","20167","20168","20169","201610","201611","201612"))&(apt_data$gu=="관악구")]
gwanak_price <- aggregate(apt_data$price,apt_data[,gu=="관악구"],mean)
apt_data[,gu=="관악구"]
gwanak_price <- aggregate(apt_data$price,by=list(apt_data[,gu=="관악구"]),mean)
View(gwanak_price)
gwanak_price <- aggregate(apt_data$price,apt_data[apt_data[,gu=="관악구"]],mean)
apt_data[apt_data[,gu=="관악구"]]
gwanak_data <- apt_data[gu=="관악구",]
View(gwanak_data)
gwanak_price <- aggregate(gwanak_data$price,apt_data[,'yyyym'],mean)
gwanak_price <- aggregate(gwanak_data$price,gwanak_data[,'yyyym'],mean)
View(gwanak_price)
names(gwanak_price)<-c('yyyym','price')
tot_ts <- ts(gwanak_price$price,start=c(2006,1),frequency = 12)
plot(stl(tot_ts,s.window='periodic')
}
plot(stl(tot_ts,s.window='periodic')
}
plot(stl(tot_ts,s.window='periodic'))
plot(stl(tot_ts))
plot(tot_ts)
?stl
?auto.arima
install.packages("forecast")
library(forecast)
arima_mdl <- auto.arima(tot_ts)
tsdiag(arima_mdl)
accuracy(arima_mdl)
plot(forecast(arima_mdl,h=8))
plot(forecast(arima_mdl))
plot(forecast(arima_mdl,h=6))
plot(forecast(arima_mdl,h=6))
install.packages("")
?forecast
plot(forecast(arima_mdl,h=3))
plot(forecast(arima_mdl,h=4))
plot(forecast(arima_mdl,h=6))
library(XML)
library(data.table)
library(stringr)
library(ggplot2)
service_key <- "EeBjN2xdCzzcqHvefO0rZXaycAim0uGpKxnOX72PY1UpkSZnifzIK1kxLm61XXaQ4pFxhbW%2F%2FZbmQDKFiAFNVA%3D%3D"
locCode <-c("11110","11140","11170","11200","11215","11230","11260","11290","11305","11320","11350","11380","11410","11440","11470","11500","11530","11545","11560","11590","11620","11650","11680","11710","11740")
locCode_nm <-c("종로구","중구","용산구","성동구","광진구","동대문구","중랑구","성북구","강북구","도봉구","노원구","은평구","서대문구","마포구","양천구","강서구","구로구","금천구","영등포구","동작구","관악구","서초구","강남구","송파구","강동구")
datelist<-c("201101","201102","201103","201104","201105","201106","201107","201108","201109","201110","201111","201112","201201","201202","201203","201204","201205","201206","201207","201208","201209","201210","201211","201212")
urllist <- list()
cnt <-0
for(i in 1:length(locCode)){
for(j in 1:length(datelist)){
cnt=cnt+1
urllist[cnt] <-paste0("http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade?LAWD_CD=",locCode[i],"&DEAL_YMD=",datelist[j],"&serviceKey=",service_key)
}
}
total<-list()
for(i in 1:length(urllist)){
item <- list()
item_temp_dt<-data.table()
raw.data <- xmlTreeParse(urllist[i], useInternalNodes = TRUE,encoding = "utf-8")
rootNode <- xmlRoot(raw.data)
items <- rootNode[[2]][['items']]
# price','con_year','year','dong','aptnm','month','dat','area','bungi','loc','floor'
size <- xmlSize(items)
for(i in 1:size){
item_temp <- xmlSApply(items[[i]],xmlValue)
item_temp_dt <- data.table(price=item_temp[1],
con_year=item_temp[2],
year=item_temp[3],
dong=item_temp[4],
aptnm=item_temp[5],
month=item_temp[6],
dat=item_temp[7],
area=item_temp[8],
bungi=item_temp[9],
loc=item_temp[10],
floor=item_temp[11])
item[[i]]<-item_temp_dt
}
total[[i]]<-rbindlist(item)
}
result_apt_data <- rbindlist(total)
save(result_apt_data, file="apt_item_sales_dt3.Rdata")
View(result_apt_data)
apt_data_seo_price <- aggregate(apt_data$price,by=list(apt_data$yyyyqrt),mean)
View(apt_data_seo_price)
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
load("apt_item_sales_dt3.Rdata") #2011~2012년도 데이터
apt_data1<-data.table(result_apt_data)
apt_data2<-data.table(result_apt_data2)
apt_data3<-data.table(result_apt_data3)
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
save(result_apt_data, file="apt_item_sales_dt3.Rdata")
getwd()
rm(list=ls())
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
load("apt_item_sales_dt3.Rdata") #2011~2012년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
apt_data1<-data.table(result_apt_data)
apt_data2<-data.table(result_apt_data2)
apt_data3<-data.table(result_apt_data3)
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
colSums(is.na(apt_data))
index_na <-is.na(apt_data$floor)
apt_data[index_na]$floor <- apt_data[index_na]$loc
apt_data[index_na]$loc <- apt_data[index_na]$bungi
apt_data[index_na]$bungi <- NA
apt_data[,price:=as.character(price)%>%str_trim()%>%sub(",","",.)%>%as.numeric()]
apt_data[,con_year:=as.character(con_year)%>%str_trim()%>%as.numeric()]
apt_data[,year:=as.character(year)%>%str_trim()%>%as.numeric()]
apt_data[between(as.numeric(as.character(month)),1,3),qrt:='Q1']
apt_data[between(as.numeric(as.character(month)),4,6),qrt:='Q2']
apt_data[between(as.numeric(as.character(month)),7,9),qrt:='Q3']
apt_data[between(as.numeric(as.character(month)),10,12),qrt:='Q4']
apt_data[,dong:=as.character(dong)%>%str_trim()]
apt_data[,yyyyqrt:=paste0(year,qrt)]
apt_data[,month:=as.character(month)%>%str_trim()%>%as.numeric()]
apt_data[,yyyym:=paste0(year,month)]
lapply(locCode,function(x){ap
t_data[loc==x,gu:=locCode_nm[which(locCode==x)]]})
locCode <-c("11110","11140","11170","11200","11215","11230","11260","11290","11305","11320","11350","11380","11410","11440","11470","11500","11530","11545","11560","11590","11620","11650","11680","11710","11740")
locCode_nm <-c("종로구","중구","용산구","성동구","광진구","동대문구","중랑구","성북구","강북구","도봉구","노원구","은평구","서대문구","마포구","양천구","강서구","구로구","금천구","영등포구","동작구","관악구","서초구","강남구","송파구","강동구")
apt_data[,price:=as.character(price)%>%str_trim()%>%sub(",","",.)%>%as.numeric()]
apt_data[,con_year:=as.character(con_year)%>%str_trim()%>%as.numeric()]
apt_data[,year:=as.character(year)%>%str_trim()%>%as.numeric()]
apt_data[between(as.numeric(as.character(month)),1,3),qrt:='Q1']
apt_data[between(as.numeric(as.character(month)),4,6),qrt:='Q2']
apt_data[between(as.numeric(as.character(month)),7,9),qrt:='Q3']
apt_data[between(as.numeric(as.character(month)),10,12),qrt:='Q4']
apt_data[,dong:=as.character(dong)%>%str_trim()]
apt_data[,yyyyqrt:=paste0(year,qrt)]
apt_data[,month:=as.character(month)%>%str_trim()%>%as.numeric()]
apt_data[,yyyym:=paste0(year,month)]
lapply(locCode,function(x){apt_data[loc==x,gu:=locCode_nm[which(locCode==x)]]})
unique(apt_data$loc)
unique(apt_data$gu)
apt_data_seo_price <- aggregate(apt_data$price,by=list(apt_data$yyyyqrt),mean)
View(apt_data_seo_price)
names(apt_data_seo_price) <- c("yyyyqrt","price")
names(apt_data_seo_price) <- c("yyyyqrt","price")
ggplot(apt_data,aes(x=yyyyqrt,y=price))+
geom_boxplot(aes(fill=yyyyqrt),outlier.size=0.5) +
xlab("분기별")+
ylab("평균매매가격")
ggplot(apt_data,aes(x=yyyyqrt,y=price))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")
ggplot(apt_data,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
View(apt_data_seo_price)
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
knitr::opts_chunk$set(echo = TRUE)
# A function for generating captions and cross-references
fig <- local({
i <- 0
list(
cap=function(refName, text, center=FALSE, col="black", inline=FALSE) {
i <<- i + 1
ref[[refName]] <<- i
css_ctr <- ""
if (center) css_ctr <- "text-align:center; display:inline-block; width:100%;"
cap_txt <- paste0("<span style=\"color:", col, "; ", css_ctr, "\">Figure ", i, ": ", text , "</span>")
anchor <- paste0("<a name=\"", refName, "\"></a>")
if (inline) {
paste0(anchor, cap_txt)
} else {
list(anchor=anchor, cap_txt=cap_txt)
}
},
ref=function(refName, link=FALSE, checkRef=TRUE) {
## This function puts in a cross reference to a caption. You refer to the
## caption with the refName that was passed to fig$cap() (not the code chunk name).
## The cross reference can be hyperlinked.
if (checkRef && !refName %in% names(ref)) stop(paste0("fig$ref() error: ", refName, " not found"))
if (link) {
paste0("<A HREF=\"#", refName, "\">Figure ", ref[[refName]], "</A>")
} else {
paste0("Figure ", ref[[refName]])
}
},
ref_all=function(){
## For debugging
ref
})
})
## This chunk replaces the default hook for processing plots. It achieves the purposes,
## of laying out auto-numbered captions, but other functionality may be gone.
library(knitr)
knit_hooks$set(plot = function(x, options) {
sty <- ""
if (options$fig.align == 'default') {
sty <- ""
} else {
sty <- paste0(" style=\"text-align:", options$fig.align, ";\"")
}
if (is.list(options$fig.cap)) {
## options$fig.cap is a list returned by the function fig$cap()
str_caption <- options$fig.cap$cap_txt
str_anchr <- options$fig.cap$anchor
} else {
## options$fig.cap is a character object (hard coded, no anchor)
str_caption <- options$fig.cap
str_anchr <- ""
}
paste('<figure', sty, '>', str_anchr, '<img src="',
opts_knit$get('base.url'), paste(x, collapse = '.'),
'"><figcaption>', str_caption, '</figcaption></figure>',
sep = '')
})
## This chucnk will read through *this* Rmd file, and attempt to extract all of the
## labels (not caption text) used for Figure captions. These labels are used
## as anchors, so scanning through the document now will allow us to create cross references
## before the caption actually appears.
## Get the name of this Rmd file
rmdFn <- knitr::current_input()  # filename of input document
## Read lines and close connection
rmdCon <- file(rmdFn, open = "r")
apt_data_seo_price <- aggregate(apt_data$price,by=list(apt_data$yyyyqrt),mean)
names(apt_data_seo_price) <- c("yyyyqrt","price")
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
knitr::current_input()
knitr::current_input()
rmdFn <- knitr::current_input()
rmdFn
library(knitr)
rmdFn <- knitr::current_input()
rmdFn
## This chucnk will read through *this* Rmd file, and attempt to extract all of the
## labels (not caption text) used for Figure captions. These labels are used
## as anchors, so scanning through the document now will allow us to create cross references
## before the caption actually appears.
## Get the name of this Rmd file
rmdFn <- knitr::current_input()  # filename of input document
## Read lines and close connection
rmdCon <- file(rmdFn, open = "r")
knitr::opts_chunk$set(echo = TRUE)
# A function for generating captions and cross-references
fig <- local({
i <- 0
list(
cap=function(refName, text, center=FALSE, col="black", inline=FALSE) {
i <<- i + 1
ref[[refName]] <<- i
css_ctr <- ""
if (center) css_ctr <- "text-align:center; display:inline-block; width:100%;"
cap_txt <- paste0("<span style=\"color:", col, "; ", css_ctr, "\">Figure ", i, ": ", text , "</span>")
anchor <- paste0("<a name=\"", refName, "\"></a>")
if (inline) {
paste0(anchor, cap_txt)
} else {
list(anchor=anchor, cap_txt=cap_txt)
}
},
ref=function(refName, link=FALSE, checkRef=TRUE) {
## This function puts in a cross reference to a caption. You refer to the
## caption with the refName that was passed to fig$cap() (not the code chunk name).
## The cross reference can be hyperlinked.
if (checkRef && !refName %in% names(ref)) stop(paste0("fig$ref() error: ", refName, " not found"))
if (link) {
paste0("<A HREF=\"#", refName, "\">Figure ", ref[[refName]], "</A>")
} else {
paste0("Figure ", ref[[refName]])
}
},
ref_all=function(){
## For debugging
ref
})
})
## This chunk replaces the default hook for processing plots. It achieves the purposes,
## of laying out auto-numbered captions, but other functionality may be gone.
library(knitr)
knit_hooks$set(plot = function(x, options) {
sty <- ""
if (options$fig.align == 'default') {
sty <- ""
} else {
sty <- paste0(" style=\"text-align:", options$fig.align, ";\"")
}
if (is.list(options$fig.cap)) {
## options$fig.cap is a list returned by the function fig$cap()
str_caption <- options$fig.cap$cap_txt
str_anchr <- options$fig.cap$anchor
} else {
## options$fig.cap is a character object (hard coded, no anchor)
str_caption <- options$fig.cap
str_anchr <- ""
}
paste('<figure', sty, '>', str_anchr, '<img src="',
opts_knit$get('base.url'), paste(x, collapse = '.'),
'"><figcaption>', str_caption, '</figcaption></figure>',
sep = '')
})
apt_data_seo_price <- aggregate(apt_data$price,by=list(apt_data$yyyyqrt),mean)
names(apt_data_seo_price) <- c("yyyyqrt","price")
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
stat_smooth(method='lm')
library(XML)
apt_data1<-data.table(result_apt_data)
apt_data2<-data.table(result_apt_data2)
apt_data3<-data.table(result_apt_data3)
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터
rm(list=ls())
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
load("apt_item_sales_dt2.Rdata") #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터
load("apt_item_sales_dt.Rdata") #load 2014~2016년도 데이터
result_apt_data1<-get(load("apt_item_sales_dt.Rdata")) #load 2014~2016년도 데이터
result_apt_data2<-get(load("apt_item_sales_dt2.Rdata")) #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터
knitr::opts_chunk$set(echo = TRUE)
apt_data1<-data.table(result_apt_data1)
library(XML)
library(data.table)
library(stringr)
library(ggplot2)
apt_data1<-data.table(result_apt_data1)
apt_data2<-data.table(result_apt_data2)
apt_data3<-data.table(result_apt_data3)
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
gu_meanprice <- aggregate(apt_data$price,by=list(apt_data$yyyym,apt_data$gu),mean)
index_na <-is.na(apt_data$floor)
apt_data[index_na]$floor <- apt_data[index_na]$loc
apt_data[index_na]$loc <- apt_data[index_na]$bungi
apt_data[index_na]$bungi <- NA
apt_data[,price:=as.character(price)%>%str_trim()%>%sub(",","",.)%>%as.numeric()]
apt_data[,con_year:=as.character(con_year)%>%str_trim()%>%as.numeric()]
apt_data[,year:=as.character(year)%>%str_trim()%>%as.numeric()]
apt_data[between(as.numeric(as.character(month)),1,3),qrt:='Q1']
apt_data[between(as.numeric(as.character(month)),4,6),qrt:='Q2']
apt_data[between(as.numeric(as.character(month)),7,9),qrt:='Q3']
apt_data[between(as.numeric(as.character(month)),10,12),qrt:='Q4']
apt_data[,dong:=as.character(dong)%>%str_trim()]
apt_data[,yyyyqrt:=paste0(year,qrt)]
apt_data[,month:=as.character(month)%>%str_trim()%>%as.numeric()]
apt_data[,yyyym:=paste0(year,month)]
lapply(locCode,function(x){apt_data[loc==x,gu:=locCode_nm[which(locCode==x)]]})
locCode <-c("11110","11140","11170","11200","11215","11230","11260","11290","11305","11320","11350","11380","11410","11440","11470","11500","11530","11545","11560","11590","11620","11650","11680","11710","11740")
locCode_nm <-c("종로구","중구","용산구","성동구","광진구","동대문구","중랑구","성북구","강북구","도봉구","노원구","은평구","서대문구","마포구","양천구","강서구","구로구","금천구","영등포구","동작구","관악구","서초구","강남구","송파구","강동구")
datelist <-c("201501","201502","201503","201504","201505","201506","201507","201508","201509","201510","201511","201512","201401","201402","201403","201404","201405","201406","201407","201408","201409","201410","201411","201412","201601","201602","201603","201604","201605","201606","201607","201608","201609","201610","201611","201612")
lapply(locCode,function(x){apt_data[loc==x,gu:=locCode_nm[which(locCode==x)]]})
gu_meanprice <- aggregate(apt_data$price,by=list(apt_data$yyyym,apt_data$gu),mean)
head(gu_meanprice)
names(gu_meanprice)<- c('yyyym','gu','price')
gu_list <- unique(gu_meanprice$gu)
install.packages("lawstat")
View(gu_meanprice)
library(lawstat)
install.packages("lawstat")
install.packages("lawstat")
knitr::opts_chunk$set(echo = TRUE)
library(lawstat)
runs_p<-c()
for(g in gu_list){
runs_p <- c(runs_p, runs.test(apt_data[gu %in% g,price])$p.value)
}
for(g in gu_list){
runs_p <- c(runs_p, runs.test(apt_data[gu %in% g,price])$p.value)
}
ggplot(data.table(gu_list, runs_p), aes(x=gu_list, y=runs_p, group=1)) +
geom_line() + geom_point() +
ylab('P-value') + xlab('구')
library(data.table)
ggplot(data.table(gu_list, runs_p), aes(x=gu_list, y=runs_p, group=1)) +
geom_line() + geom_point() +
ylab('P-value') + xlab('구')
which(runs_p>0.05)
gwanak_data <- apt_data[gu=="관악구",]
gwanak_price <- aggregate(gwanak_data$price,by=list(gwanak_data$yyyyqrt),mean)
names(gwanak_price)<-c('yyyyqrt','price')
tot_ts <- ts(gwanak_price$price,start=c(2013,1),frequency = 4)
plot(tot_ts)
tot_ts <- ts(gwanak_price$price,start=c(2011,1),frequency = 4)
plot(tot_ts)
install.packages("forecast")
library(forecast)
arima_mdl <- auto.arima(tot_ts)
tsdiag(arima_mdl)
accuracy(arima_mdl)
plot(forecast(arima_mdl,h=6))
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
library(XML)
library(data.table)
library(stringr)
library(ggplot2)
result_apt_data1<-get(load("apt_item_sales_dt.Rdata")) #load 2014~2016년도 데이터
result_apt_data2<-get(load("apt_item_sales_dt2.Rdata")) #load 2013년도 데이터
result_apt_data3<-get(load("apt_item_sales_dt3.Rdata")) #2011~2012년도 데이터 데이터
apt_data1<-data.table(result_apt_data1)
apt_data2<-data.table(result_apt_data2)
apt_data3<-data.table(result_apt_data3)
apt_data<-rbindlist(list(apt_data1,apt_data2,apt_data3))
colSums(is.na(apt_data))
index_na <-is.na(apt_data$floor)
apt_data[index_na]$floor <- apt_data[index_na]$loc
apt_data[index_na]$bungi <- NA
apt_data[,price:=as.character(price)%>%str_trim()%>%sub(",","",.)%>%as.numeric()]
apt_data[,con_year:=as.character(con_year)%>%str_trim()%>%as.numeric()]
apt_data[,year:=as.character(year)%>%str_trim()%>%as.numeric()]
apt_data[between(as.numeric(as.character(month)),1,3),qrt:='Q1']
apt_data[between(as.numeric(as.character(month)),4,6),qrt:='Q2']
apt_data[between(as.numeric(as.character(month)),7,9),qrt:='Q3']
apt_data[between(as.numeric(as.character(month)),10,12),qrt:='Q4']
apt_data[,dong:=as.character(dong)%>%str_trim()]
apt_data[,yyyyqrt:=paste0(year,qrt)]
apt_data[,month:=as.character(month)%>%str_trim()%>%as.numeric()]
apt_data[,yyyym:=paste0(year,month)]
lapply(locCode,function(x){apt_data[loc==x,gu:=locCode_nm[which(locCode==x)]]})
apt_data_seo_price <- aggregate(apt_data$price,by=list(apt_data$yyyyqrt),mean)
names(apt_data_seo_price) <- c("yyyyqrt","price")
ggplot(apt_data_seo_price,aes(x=yyyyqrt,y=price,group=1))+
geom_line() +
xlab("분기별")+
ylab("평균매매가격")+
theme(axis.text.x=element_text(angle=90))+
stat_smooth(method='lm')
apt_data_by_gu_qrt <- aggregate(apt_data$price, by=list(apt_data$yyyyqrt,apt_data$gu), mean)
names(apt_data_by_gu_qrt) <- c('yyyyqrt','gu','pricemean')
ggplot(apt_data_by_gu_qrt,aes(x=yyyyqrt,y=pricemean,group=gu))+
geom_line()+
facet_wrap(~gu,scale='free_y', ncol=3)+
theme(axis.text.x=element_blank())+
stat_smooth(method="lm")
```{r, fig.cap="[그림3]지역별(구) 랜덤성 검정", fig.align="center"}
gu_meanprice <- as.data.table(aggregate(apt_data$price,by=list(apt_data$yyyyqrt,apt_data$gu),mean))
head(gu_meanprice)
names(gu_meanprice)<- c('yyyyqrt','gu','price')
gu_list <- unique(gu_meanprice$gu)
```{r, results="hide"}
library(lawstat)
runs_p<-c()
for(g in gu_list){
runs_p <- c(runs_p, runs.test(gu_meanprice[gu %in% g,price])$p.value)
}
ggplot(data.table(gu_list, runs_p), aes(x=gu_list, y=runs_p, group=1)) +
geom_line() + geom_point() +
ylab('P-value') + xlab('구') +
theme(axis.text.x=element_text(angle=90))
gwanak_data <- apt_data[gu=="관악구",]
gwanak_price <- aggregate(gwanak_data$price,by=list(gwanak_data$yyyyqrt),mean)
names(gwanak_price)<-c('yyyyqrt','price')
tot_ts <- ts(gwanak_price$price,start=c(2011,1),frequency = 4)
plot(stl(tot_ts,s.window = 'periodic'))
tot_ts.stl <-stl(tot_ts,s.window = 'periodic')
tot_ts.stl
tot_ts.stl$time.series
tot_ts.stl$time.series[seasonal]
tot_ts.stl$time.series["seasonal"]
tot_ts.stl$time.series[1]
tot_ts.stl$time.series[,1]
adj.tot_ts<-tot_ts-tot_ts.stl$time.series[,1]
plot(adj.tot_ts)
plot(tot_ts)
plot(adj.tot_ts)
tot_ts <- ts(gwanak_price$price,start=c(2011,1),frequency = 4)
plot(tot_ts)
plot(stl(tot_ts,s.window = 'periodic'))
tot_ts.stl <-stl(tot_ts,s.window = 'periodic')
adj.tot_ts<-tot_ts-tot_ts.stl$time.series[,1]
plot(adj.tot_ts)
library(forecast)
arima_mdl <- auto.arima(tot_ts)
arima_mdl
tsdiag(arima_mdl)
arima_mdl
accuracy(arima_mdl)
plot(forecast(arima_mdl,h=6))
plot(forecast(arima_mdl,h=4))
plot(forecast(arima_mdl,h=8))
accuracy(arima_mdl)
tsdiag(arima_mdl)
